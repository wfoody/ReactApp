{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/willfoody/Documents/Repositories/ReactApp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\n\nfunction App() {\n  _s();\n\n  // const [data, setData] = useState({elections:[]})\n  // useEffect(() => {\n  //   fetchData()\n  // }, [])\n  // const fetchData = () => {\n  //   fetch(\"https://www.googleapis.com/civicinfo/v2/elections?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8\")\n  //   // fetch('https://www.googleapis.com/civicinfo/v2/voterinfo?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=320%20Atlanta%20Ave.SE%20Atlanta%20GA%2030315&electionId=7001')\n  //     .then(response => response.json())\n  //     .then(result => {\n  //       setData(result)\n  //     })\n  // }\n  // const dataItems = data.elections.map(dataItem => {\n  //   return (\n  //     <div>\n  //       <li>{dataItem.name}</li>\n  //     </div>\n  //   )\n  // })\n  const [address, setAddress] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n\n  const handleSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAddress(value);\n    setCoordinates(latLng);\n    getElectionDataByAddress(value);\n    getVoterInfoByAddress(value);\n    getRepInfoByAddress(value);\n  };\n\n  async function getVoterInfoByAddress(value) {\n    let formattedAddress = value.split(\" \").join(\"%20\");\n    let url = `https://www.googleapis.com/civicinfo/v2/voterinfo?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`;\n    let response = await fetch(url);\n    let data = await response.json();\n    console.log(data);\n  }\n\n  async function getRepInfoByAddress(value) {\n    let formattedAddress = value.split(\" \").join(\"%20\");\n    let url = `https://www.googleapis.com/civicinfo/v2/representatives?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`;\n    let response = await fetch(url);\n    let data = await response.json();\n    console.log(data);\n  }\n\n  async function getElectionDataByAddress(value) {\n    let formattedAddress = value.split(\" \").join(\"%20\");\n    let url = `https://www.googleapis.com/civicinfo/v2/elections?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`;\n    let response = await fetch(url);\n    let data = await response.json();\n    console.log(data);\n  }\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   <h1>App</h1>\n    //   {dataItems}\n    // </div>\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: address,\n        onChange: setAddress,\n        onSelect: handleSelect,\n        children: ({\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n              placeholder: \"Enter address here\"\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"...loading\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 24\n            }, this) : null, suggestions.map(suggestion => {\n              const style = {\n                backgroundColor: suggestion.active ? \"#65C6F7\" : \"#fff\",\n                color: suggestion.active ? \"#fff\" : \"#000000\"\n              };\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                  style\n                }),\n                children: suggestion.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"In+Ph3uOLohdgW4UpdPfq2wOwbs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/willfoody/Documents/Repositories/ReactApp/src/App.js"],"names":["React","useEffect","useState","PlacesAutocomplete","geocodeByAddress","geocodeByPlaceId","getLatLng","App","address","setAddress","coordinates","setCoordinates","lat","lng","handleSelect","value","results","latLng","getElectionDataByAddress","getVoterInfoByAddress","getRepInfoByAddress","formattedAddress","split","join","url","response","fetch","data","json","console","log","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","backgroundColor","active","color","description"],"mappings":";;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,gBAFF,EAGEC,SAHF,QAIO,2BAJP;;AAOA,SAASC,GAAT,GAAe;AAAA;;AAGb;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,KAAK,CAACE,QAAN,CAAe,EAAf,CAA9B;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCX,KAAK,CAACE,QAAN,CAAe;AACnDU,IAAAA,GAAG,EAAE,IAD8C;AAEnDC,IAAAA,GAAG,EAAE;AAF8C,GAAf,CAAtC;;AAOA,QAAMC,YAAY,GAAG,MAAMC,KAAN,IAAe;AAClC,UAAMC,OAAO,GAAG,MAAMZ,gBAAgB,CAACW,KAAD,CAAtC;AACA,UAAME,MAAM,GAAG,MAAMX,SAAS,CAACU,OAAO,CAAC,CAAD,CAAR,CAA9B;AACAP,IAAAA,UAAU,CAACM,KAAD,CAAV;AACAJ,IAAAA,cAAc,CAACM,MAAD,CAAd;AACAC,IAAAA,wBAAwB,CAACH,KAAD,CAAxB;AACAI,IAAAA,qBAAqB,CAACJ,KAAD,CAArB;AACAK,IAAAA,mBAAmB,CAACL,KAAD,CAAnB;AACD,GARD;;AAUA,iBAAeI,qBAAf,CAAqCJ,KAArC,EAA4C;AAC1C,QAAIM,gBAAgB,GAAGN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiBC,IAAjB,CAAsB,KAAtB,CAAvB;AACA,QAAIC,GAAG,GAAI,yGAAwGH,gBAAiB,EAApI;AACA,QAAII,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA1B;AACA,QAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD;;AAED,iBAAeP,mBAAf,CAAmCL,KAAnC,EAA0C;AACxC,QAAIM,gBAAgB,GAAGN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiBC,IAAjB,CAAsB,KAAtB,CAAvB;AACA,QAAIC,GAAG,GAAI,+GAA8GH,gBAAiB,EAA1I;AACA,QAAII,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA1B;AACA,QAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD;;AAID,iBAAeT,wBAAf,CAAyCH,KAAzC,EAAgD;AAC9C,QAAIM,gBAAgB,GAAGN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiBC,IAAjB,CAAsB,KAAtB,CAAvB;AAEA,QAAIC,GAAG,GAAI,yGAAwGH,gBAAiB,EAApI;AAEA,QAAII,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA1B;AACA,QAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD;;AAED;AAAA;AAEE;AACA;AACA;AACA;AACA;AAAA,6BACE,QAAC,kBAAD;AACE,QAAA,KAAK,EAAEnB,OADT;AAEE,QAAA,QAAQ,EAAEC,UAFZ;AAGE,QAAA,QAAQ,EAAEK,YAHZ;AAAA,kBAKG,CAAC;AAAEiB,UAAAA,aAAF;AAAiBC,UAAAA,WAAjB;AAA8BC,UAAAA,sBAA9B;AAAsDC,UAAAA;AAAtD,SAAD,kBACD;AAAA,kCACE,sBAAWH,aAAa,CAAC;AAAEI,cAAAA,WAAW,EAAE;AAAf,aAAD;AAAxB;AAAA;AAAA;AAAA;AAAA,kBADF,eAGE;AAAA,uBACGD,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAH,GAA2B,IADrC,EAGGF,WAAW,CAACI,GAAZ,CAAiBC,UAAD,IAAgB;AAC/B,oBAAMC,KAAK,GAAG;AACZC,gBAAAA,eAAe,EAAEF,UAAU,CAACG,MAAX,GAAoB,SAApB,GAAgC,MADrC;AAEZC,gBAAAA,KAAK,EAAEJ,UAAU,CAACG,MAAX,GAAoB,MAApB,GAA6B;AAFxB,eAAd;AAMA,kCACE,oBAASP,sBAAsB,CAACI,UAAD,EAAa;AAACC,kBAAAA;AAAD,iBAAb,CAA/B;AAAA,0BACGD,UAAU,CAACK;AADd;AAAA;AAAA;AAAA;AAAA,sBADF;AAID,aAXA,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANF;AAqCD;;GAnHQnC,G;;KAAAA,G;AAqHT,eAAeA,GAAf","sourcesContent":["\nimport React from 'react'\nimport './App.css';\nimport { useEffect, useState } from 'react'\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  geocodeByPlaceId,\n  getLatLng,\n} from 'react-places-autocomplete';\n\n\nfunction App() {\n\n\n  // const [data, setData] = useState({elections:[]})\n\n  // useEffect(() => {\n  //   fetchData()\n  // }, [])\n\n\n  // const fetchData = () => {\n  //   fetch(\"https://www.googleapis.com/civicinfo/v2/elections?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8\")\n  //   // fetch('https://www.googleapis.com/civicinfo/v2/voterinfo?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=320%20Atlanta%20Ave.SE%20Atlanta%20GA%2030315&electionId=7001')\n  //     .then(response => response.json())\n  //     .then(result => {\n  //       setData(result)\n  //     })\n  // }\n\n  // const dataItems = data.elections.map(dataItem => {\n\n  //   return (\n\n  //     <div>\n  //       <li>{dataItem.name}</li>\n  //     </div>\n  //   )\n  // })\n\n  const [address, setAddress] = React.useState(\"\")\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  })\n\n\n\n  const handleSelect = async value => {\n    const results = await geocodeByAddress(value)\n    const latLng = await getLatLng(results[0])\n    setAddress(value) \n    setCoordinates(latLng)\n    getElectionDataByAddress(value)\n    getVoterInfoByAddress(value)\n    getRepInfoByAddress(value)\n  }\n\n  async function getVoterInfoByAddress(value) {\n    let formattedAddress = value.split(\" \").join(\"%20\")\n    let url = `https://www.googleapis.com/civicinfo/v2/voterinfo?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`\n    let response = await fetch(url)\n    let data = await response.json()\n\n    console.log(data)\n  }\n\n  async function getRepInfoByAddress(value) {\n    let formattedAddress = value.split(\" \").join(\"%20\")\n    let url = `https://www.googleapis.com/civicinfo/v2/representatives?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`\n    let response = await fetch(url)\n    let data = await response.json()\n\n    console.log(data)\n  }\n\n\n\n  async function getElectionDataByAddress (value) {\n    let formattedAddress = value.split(\" \").join(\"%20\")\n\n    let url = `https://www.googleapis.com/civicinfo/v2/elections?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`\n\n    let response = await fetch(url)\n    let data = await response.json()\n\n    console.log(data)\n  }\n\n  return (\n\n    // <div>\n    //   <h1>App</h1>\n    //   {dataItems}\n    // </div>\n    <div>\n      <PlacesAutocomplete\n        value={address}\n        onChange={setAddress}\n        onSelect={handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <div>\n          <input {...getInputProps({ placeholder: \"Enter address here\" })} />\n          \n          <div>\n            {loading ? <div>...loading</div> : null}\n\n            {suggestions.map((suggestion) => {\n              const style = {\n                backgroundColor: suggestion.active ? \"#65C6F7\" : \"#fff\",\n                color: suggestion.active ? \"#fff\" : \"#000000\"\n\n              }\n\n              return ( \n                <div {...getSuggestionItemProps(suggestion, {style})}>\n                  {suggestion.description}</div>\n              )\n            })}\n          </div>\n        </div>\n      )}\n      </PlacesAutocomplete>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}