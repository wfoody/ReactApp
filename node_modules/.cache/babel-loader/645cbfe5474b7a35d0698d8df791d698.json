{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/willfoody/Documents/Repositories/ReactApp/src/components/newApp.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\nimport { connect } from 'react-redux';\n\nfunction newApp(props) {\n  _s();\n\n  const [address, setAddress] = useState(\"\");\n  let formattedAddress = address.split(\" \").join(\"%20\");\n\n  const getRepInfoByAddress = () => {\n    fetch(`https://www.googleapis.com/civicinfo/v2/representatives?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`).then(response => response.json()).then(result => {\n      console.log(result);\n      props.onFetchReps(result);\n      /* set action for search to button, onChange and onClick */\n    });\n  };\n\n  useEffect(() => {// getRepInfoByAddress()\n  }, []);\n  const dataItems = props.reps.officials.map(rep => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: rep.officials\n    }, rep.normalizedInput, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: address,\n      onChange: setAddress,\n      onSelect: getRepInfoByAddress,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n            placeholder: \"Enter address here\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"...loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 40\n          }, this) : null, suggestions.map(suggestion => {\n            const style = {\n              backgroundColor: suggestion.active ? \"#65C6F7\" : \"#fff\",\n              color: suggestion.active ? \"#fff\" : \"#000000\"\n            };\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                style\n              }),\n              children: suggestion.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: dataItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(newApp, \"NIkxkRo2pPsM812HkyPDjT9g1P4=\");\n\nconst mapStateToProps = state => {\n  return {\n    reps: state.reps\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchReps: reps => dispatch({\n      type: 'FETCH_REPS',\n      payload: reps\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(newApp);","map":{"version":3,"sources":["/Users/willfoody/Documents/Repositories/ReactApp/src/components/newApp.js"],"names":["React","useEffect","useState","PlacesAutocomplete","geocodeByAddress","geocodeByPlaceId","getLatLng","connect","newApp","props","address","setAddress","formattedAddress","split","join","getRepInfoByAddress","fetch","then","response","json","result","console","log","onFetchReps","dataItems","reps","officials","map","rep","normalizedInput","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","suggestion","style","backgroundColor","active","color","description","mapStateToProps","state","mapDispatchToProps","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css';\nimport { useEffect, useState } from 'react'\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    geocodeByPlaceId,\n    getLatLng,\n} from 'react-places-autocomplete';\nimport { connect } from 'react-redux'\n\n\n\nfunction newApp(props) {\n\n\n    const [address, setAddress] = useState(\"\")\n\n    let formattedAddress = address.split(\" \").join(\"%20\")\n\n\n    const getRepInfoByAddress = () => {\n        fetch(`https://www.googleapis.com/civicinfo/v2/representatives?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`)\n            .then(response => response.json())\n            .then(result => {\n                console.log(result)\n                props.onFetchReps(result) /* set action for search to button, onChange and onClick */\n            })\n    }\n\n    useEffect(() => {\n        // getRepInfoByAddress()\n    }, [])\n\n\n    const dataItems = props.reps.officials.map(rep => {\n        return (\n            <div key={rep.normalizedInput}>{rep.officials}</div>\n        )\n    })\n\n\n    return (\n\n\n        <div>\n            <PlacesAutocomplete\n                value={address}\n                onChange={setAddress}\n                onSelect={getRepInfoByAddress}\n            >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                        <input {...getInputProps({ placeholder: \"Enter address here\" })} />\n\n                        <div>\n                            {loading ? <div>...loading</div> : null}\n\n                            {suggestions.map((suggestion) => {\n                                const style = {\n                                    backgroundColor: suggestion.active ? \"#65C6F7\" : \"#fff\",\n                                    color: suggestion.active ? \"#fff\" : \"#000000\"\n\n                                }\n\n                                return (\n                                    <div\n                                        {...getSuggestionItemProps(suggestion, { style })}>\n                                        {suggestion.description}\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                )}\n            </PlacesAutocomplete>\n\n            <ul>{dataItems}</ul>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        reps: state.reps\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchReps: (reps) => dispatch({\n            type: 'FETCH_REPS',\n            payload: reps\n        })\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(newApp);\n"]},"metadata":{},"sourceType":"module"}