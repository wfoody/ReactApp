{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/willfoody/Documents/Repositories/ReactApp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete'; // const { google } = require('googleapis')\n\nfunction App() {\n  _s();\n\n  const [address, setAddress] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n  let formattedAddress = address.split(\" \").join(\"%20\");\n  const [reps, setReps] = useState([]);\n  useEffect(() => {\n    fetch(`https://www.googleapis.com/civicinfo/v2/representatives?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`).then(response => response.json()).then(result => {\n      setReps(result);\n    });\n  });\n\n  const handleSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAddress(value);\n    setCoordinates(latLng); // getElectionDataByAddress(value)\n    // getVoterInfoByAddress(value)\n\n    getRepInfoByAddress(value);\n  }; // not using these commented out functions yet, just REPS\n  // async function getVoterInfoByAddress(value) {\n  //   let formattedAddress = value.split(\" \").join(\"%20\")\n  //   let url = `https://www.googleapis.com/civicinfo/v2/voterinfo?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`\n  //   let response = await fetch(url)\n  //   let data = await response.json()\n  //   console.log(data)\n  // }\n\n\n  async function getRepInfoByAddress(value) {\n    // let formattedAddress = value.split(\" \").join(\"%20\")\n    let url = `https://www.googleapis.com/civicinfo/v2/representatives?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`;\n    let response = await fetch(url);\n    let data = await response.json();\n    console.log(data);\n  }\n\n  const dataItems = reps.offices.map(rep => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: rep.officials.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }); // async function getElectionDataByAddress(value) {\n  //   let formattedAddress = value.split(\" \").join(\"%20\")\n  //   let url = `https://www.googleapis.com/civicinfo/v2/elections?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`\n  //   let response = await fetch(url)\n  //   let data = await response.json()\n  //   console.log(data)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: address,\n      onChange: setAddress,\n      onSelect: handleSelect,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n            placeholder: \"Enter address here\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"...loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 26\n          }, this) : null, suggestions.map(suggestion => {\n            const style = {\n              backgroundColor: suggestion.active ? \"#65C6F7\" : \"#fff\",\n              color: suggestion.active ? \"#fff\" : \"#000000\"\n            };\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                style\n              }),\n              children: suggestion.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: dataItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"47DqEz/ZWkc6Oulhn4AyaWjE+6k=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/willfoody/Documents/Repositories/ReactApp/src/App.js"],"names":["React","useEffect","useState","PlacesAutocomplete","geocodeByAddress","geocodeByPlaceId","getLatLng","App","address","setAddress","coordinates","setCoordinates","lat","lng","formattedAddress","split","join","reps","setReps","fetch","then","response","json","result","handleSelect","value","results","latLng","getRepInfoByAddress","url","data","console","log","dataItems","offices","map","rep","officials","name","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","suggestion","style","backgroundColor","active","color","description"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport './App.css';\nimport { useEffect, useState } from 'react'\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  geocodeByPlaceId,\n  getLatLng,\n} from 'react-places-autocomplete';\n// const { google } = require('googleapis')\n\n\nfunction App() {\n\n  const [address, setAddress] = React.useState(\"\")\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  })\n\n  let formattedAddress = address.split(\" \").join(\"%20\")\n\n\n  const [reps, setReps] = useState([])\n\n  useEffect(() => {\n    fetch(`https://www.googleapis.com/civicinfo/v2/representatives?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`)\n      .then(response => response.json())\n      .then(result => {\n        setReps(result)\n      })\n  })\n\n\n\n\n  const handleSelect = async value => {\n    const results = await geocodeByAddress(value)\n    const latLng = await getLatLng(results[0])\n    setAddress(value)\n    setCoordinates(latLng)\n    // getElectionDataByAddress(value)\n    // getVoterInfoByAddress(value)\n    getRepInfoByAddress(value)\n  }\n\n\n  // not using these commented out functions yet, just REPS\n\n  // async function getVoterInfoByAddress(value) {\n  //   let formattedAddress = value.split(\" \").join(\"%20\")\n  //   let url = `https://www.googleapis.com/civicinfo/v2/voterinfo?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`\n  //   let response = await fetch(url)\n  //   let data = await response.json()\n\n  //   console.log(data)\n  // }\n\n  async function getRepInfoByAddress(value) {\n    // let formattedAddress = value.split(\" \").join(\"%20\")\n    let url = `https://www.googleapis.com/civicinfo/v2/representatives?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`\n    let response = await fetch(url)\n    let data = await response.json()\n\n    console.log(data)\n  }\n  \n\n  const dataItems = reps.offices.map(rep => {\n    return (\n      <div>{rep.officials.name}</div>\n    )\n  })\n\n  // async function getElectionDataByAddress(value) {\n  //   let formattedAddress = value.split(\" \").join(\"%20\")\n\n  //   let url = `https://www.googleapis.com/civicinfo/v2/elections?key=AIzaSyDatTrCAc_AsUpv-RrJ1uT-a9kvyF6SJS8&address=${formattedAddress}`\n\n  //   let response = await fetch(url)\n  //   let data = await response.json()\n\n  //   console.log(data)\n  // }\n\n  return (\n\n\n    <div>\n      <PlacesAutocomplete\n        value={address}\n        onChange={setAddress}\n        onSelect={handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input {...getInputProps({ placeholder: \"Enter address here\" })} />\n\n            <div>\n              {loading ? <div>...loading</div> : null}\n\n              {suggestions.map((suggestion) => {\n                const style = {\n                  backgroundColor: suggestion.active ? \"#65C6F7\" : \"#fff\",\n                  color: suggestion.active ? \"#fff\" : \"#000000\"\n\n                }\n\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, { style })}>\n                    {suggestion.description}\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n\n      <ul>{dataItems}</ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}